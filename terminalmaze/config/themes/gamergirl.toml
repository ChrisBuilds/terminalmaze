# NOTE: Colors are shown when their number of verbosity is enabled.
#       See help menu for more information. Not applicable to wall/path.
# Verbosity: 2 = Logic only, 3 = Style only, 4 = Logic and Style
#######################################################################
########################    MAZE ALGORITHMS    ########################
#######################################################################
[aldous_broder]
# time between frames while searching for unliked cells, longer delay allows
#  faster searching but causes a less fluid animation
maximum_searching_frame_delay = 0.027

# color of the walls and unlinked cells
wall.color = 16
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 34
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 1
working_cell.colors = [218]
working_cell.characters = []

# last grid cell that was linked into the maze
last_linked.verbosity = [3,4]
last_linked.layer = 1
last_linked.frames_per_value = 30
last_linked.colors = [28,[22,46],46]
last_linked.characters = ["0","10","1"]

# neighbors invalid for linking (adjacent to the working cell)
invalid_neighbors.verbosity = [2,4]
invalid_neighbors.layer = 0
invalid_neighbors.frames_per_value = 1
invalid_neighbors.colors = [159]
invalid_neighbors.characters = []

# cells that are already linked into the maze and are being revisted
invalid_visited.verbosity = [3,4]
invalid_visited.layer = 0
invalid_visited.frames_per_value = 3
#invalid_visited.colors = [34,28,22,22,22,28,34]
#invalid_visited.characters = ["‚ñá","‚ñÜ","‚ñÖ","‚ñÑ","‚ñÖ","‚ñÜ","‚ñá"]
invalid_visited.colors = [34,28,22,28,34]
invalid_visited.characters = ["‚ñì","‚ñí","‚ñë","‚ñí","‚ñì"]

###########################
###########################
[binary_tree]
# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 1
working_cell.colors = [218]
working_cell.characters = []

# cell last linked into the maze
last_linked.verbosity = [2,4]
last_linked.layer = 0
last_linked.frames_per_value = 1
last_linked.colors = [159]
last_linked.characters = []

# eighbors adjacent to the cell
neighbors.verbosity = [2,4]
neighbors.layer = 0
neighbors.frames_per_value = 1
neighbors.colors = [159]
neighbors.characters = []

###########################
###########################
[ellers]
#NOTE: Ellers algorithm relies on random colors for the cell groups which
#      limits configuration options. Path color may only be observed after
#      maze generation has completed.

# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# groups of cells
group_to_random_color.verbosity = [2,3,4]
group_to_random_color.layer = 0
group_to_random_color.character = ""

###########################
###########################
[hunt_and_kill]
# number of frames to skip per frame shown during the hunting state, decrease
#  to slow down, and show more frames, during the hunting state
hunting_frames_skip = 3
# color of the walls and unlinked cells
wall.color = 16
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 34
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 1
working_cell.colors = [218]
working_cell.characters = []

# neighbors invalid for linking (adjacent to the working cell)
invalid_neighbors.verbosity = [2,4]
invalid_neighbors.layer = 0
invalid_neighbors.frames_per_value = 1
invalid_neighbors.colors = [88]
invalid_neighbors.characters = []

# last cell linked into the grid
last_linked.verbosity = [3,4]
last_linked.layer = 0
last_linked.frames_per_value = 2
last_linked.characters = []
last_linked.colors = [46, 47, 48, 49, 50]

# unlinked cells passed over while in the hunting state
hunt_cells.verbosity = [3,4]
hunt_cells.layer = 0
hunt_cells.frames_per_value = 1
hunt_cells.colors = [47, 48, 49, 50]
hunt_cells.characters = []


###########################
###########################
[kruskals_randomized]
#NOTE: Kruskal's Randomized algorithm relies on random colors for the cell groups which
#      limits configuration options. Path color may only be observed after
#      maze generation has completed.

# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# groups of cells
group_random_color.verbosity = [2,3,4]
group_random_color.layer = 0
group_random_color.character = ""

###########################
###########################
[prims_simple]
# frames skipped is based on the number of active edges, adjust the ratio up to slow
#  down and show more frames : int >= 1
edge_frame_ratio = 4

# color of the walls and unlinked cells
wall.color = "#398BA7"
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = "#F4B9C5"
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 20
working_cell.colors = ["#c3feff"]
working_cell.characters = []

# cells on the edge of the linked area
edges.verbosity = [3,4]
edges.layer = 1
edges.frames_per_value = 20
edges.colors = ["#82eeef","#8ae5ff","#add8ff","#d3cafd","#ecbfe3"]
edges.characters = ["‚ñ´","‚ñ™","‚ñ¨","‚ñ†"]

# neighbors invalid for linking (adjacent to the working cell)
invalid_neighbors.verbosity = [2,4]
invalid_neighbors.layer = 0
invalid_neighbors.frames_per_value = 1
invalid_neighbors.colors = [52]
invalid_neighbors.characters = []

# last cell that was linked into the maze
last_linked.verbosity = [2,3,4]
last_linked.layer = 0
last_linked.frames_per_value = 20
last_linked.colors = ["#82eeef","#8ae5ff","#add8ff","#d3cafd","#ecbfe3"]
last_linked.characters = ["‚ñ´","‚ñ™","‚ñ¨","‚ñ†"]

###########################
###########################
[prims_weighted]
# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 1
working_cell.colors = [218]
working_cell.characters = []

# links encountered but not linked due to high cost
pending_weighted_links.verbosity = [3,4]
pending_weighted_links.layer = 0
pending_weighted_links.color = 79
pending_weighted_links.character = ""

# newly discovered links not linked due to high cost
new_weighted_links.verbosity = [3,4]
new_weighted_links.layer = 1
new_weighted_links.frames_per_value = 15
new_weighted_links.colors = [82,76,77,78]
new_weighted_links.characters = []

# cells adjacent to the workingcell that are not linked
unlinked_neighbors.verbosity = [2,4]
unlinked_neighbors.layer = 0
unlinked_neighbors.frames_per_value = 1
unlinked_neighbors.colors = [218]
unlinked_neighbors.characters = []

# cell last linked into the maze
last_linked.verbosity = [3,4]
last_linked.layer = 2
last_linked.frames_per_value = 1
last_linked.colors = [47, 48, 49, 50]
last_linked.characters = []

###########################
###########################
[recursive_backtracker]
# color of the walls and unlinked cells
wall.color = "#398BA7"
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = "#F4B9C5"
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 1
working_cell.colors = [218]
working_cell.characters = []

# path on the first pass, before backtracking
stack.verbosity = [3,4]
stack.layer = 0
stack.color = "#82EEEF"
stack.character = ""

# neighbors invalid for linking (adjacent to the working cell)
invalid_neighbors.verbosity = [2,4]
invalid_neighbors.layer=0
invalid_neighbors.frames_per_value = 1
invalid_neighbors.colors = [52]
invalid_neighbors.characters = []

# last cell that was linked into the maze
last_linked.verbosity = [2,4]
last_linked.layer = 0
last_linked.frames_per_value = 1
last_linked.colors = [218]
last_linked.characters = []

# cells as they are added to the stack
stack_added_cells.verbosity = [3,4]
stack_added_cells.layer = 0
stack_added_cells.frames_per_value = 5
stack_added_cells.colors = ["#f2ffff","#defcfc","#caf9f9","#b4f5f6","#9cf2f2"]
stack_added_cells.characters = []

# cells as they are removed from the stack
stack_removed_cells.verbosity = [3,4]
stack_removed_cells.layer = 1
stack_removed_cells.frames_per_value = 10
stack_removed_cells.colors = ["#f9d0d8", "f9d0d8", "#f9d0d8","#fce8eb","#fce8eb","#ffffff","#ffffff","#fce8eb"]
stack_removed_cells.characters = ["üûóüûû","üûû‚Øç","‚Øå‚Øé‚Øè‚Øç","‚Øç‚ØÅ","‚ØÅ‚ØÇ","‚ØÇ‚ØÄ","‚ØÄ‚ñ†"]
###########################
###########################
[recursive_division]

# color of the walls and unlinked cells
wall.color = "#000000"
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = "#43a047"
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 1
working_cell.colors = [46]
working_cell.characters = []

# single passage cell ignored during division
passage_cell.verbosity = [2,4]
passage_cell.layer = 1
passage_cell.frames_per_value = 12
passage_cell.colors = [94]
passage_cell.characters = []

# fully linke.charactersd cells generated at the start of the maze generation
generating_links_cells.verbosity = [3,4]
generating_links_cells.layer = 0
generating_links_cells.frames_per_value = 12
generating_links_cells.colors = [["#43a047","#589a5f","#6c9272","#808982"],["#43a047","#589a5f","#6c9272","#808982"],["#43a047","#589a5f","#6c9272","#808982"],["#43a047","#589a5f","#6c9272","#808982"]]
generating_links_cells.characters = ["‚Ñ¶‚ÖÄ‡•ù‚Ñ•‡•≠‡§Ü‚çï‚ç´‚èß‚èÖ","‚Ñ¶‚ÖÄ‚Ñ•‡•ù‚çï‚ç´‡•≠‡§Ü‚èß‚èÖ","‚Ñ¶‚ÖÄ‚Ñ•‡•≠‡§Ü‡•ù‚èß‚çï‚ç´‚èÖ","‚Ñ¶‚ÖÄ‚Ñ•‚çï‡•≠‡•ù‡§Ü‚èß‚ç´‚èÖ‚ñà"]


# east cells during a vertical division
division_cell_east.verbosity = [3,4]
division_cell_east.layer = 0
division_cell_east.frames_per_value = 2
division_cell_east.colors = ["#43a047","#008071","#006e74"]
division_cell_east.characters = ["‚ñê","‚ñï","‚ñê"]

# west cells during a vertical division
division_cell_west.verbosity = [3,4]
division_cell_west.layer = 0
division_cell_west.frames_per_value = 6
division_cell_west.colors = ["#43a047","#009161","#008071","#006e74","#005b6b","#2a4858",["#43a047","#008071","#006e74"],["#43a047","#008071","#006e74"],["#43a047","#008071","#006e74"],"#2a4858","#005b6b","#006e74","#008071","#009161","#43a047","#43a047"]
division_cell_west.characters = ["‚ñâ","‚ñä","‚ñã","‚ñå","‚ñç","‚ñé","01","01","01","‚ñç","‚ñå","‚ñã","‚ñä","‚ñâ"]

# north cells during a vertical division
division_cell_north.verbosity = [3,4]
division_cell_north.layer = 0
division_cell_north.frames_per_value = 2
division_cell_north.colors = ["#43a047","#008071","#006e74"]
division_cell_north.characters = ["‚ñÄ","‚ñî","‚ñÄ"]

# south cells during a vertical division
division_cell_south.verbosity = [3,4]
division_cell_south.layer = 0
division_cell_south.frames_per_value = 6
division_cell_south.colors = ["#43a047","#009161","#008071","#006e74","#005b6b","#2a4858",["#43a047","#008071","#006e74"],["#43a047","#008071","#006e74"],["#43a047","#008071","#006e74"],["#43a047","#008071","#006e74"],"#2a4858","#005b6b","#006e74","#008071","#009161","#43a047","#43a047"]
division_cell_south.characters = ["‚ñá","‚ñÜ","‚ñÖ","‚ñÑ","‚ñÉ","‚ñÇ","‚ñÅ","01","01","01","‚ñÇ","‚ñÉ","‚ñÑ","‚ñÖ","‚ñÜ","‚ñá"]


###########################
###########################
[side_winder]
# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# cells in each run prior to making an upward link
run.verbosity = [2,4]
run.layer = 1
run.color = 218
run.character = ""

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 1
working_cell.colors = [218]
working_cell.characters = []

# last cell that was linked into the maze
last_linked.verbosity = [2,4]
last_linked.layer = 0
last_linked.frames_per_value = 10
last_linked.colors = [159]
last_linked.characters = []

###########################
###########################
[wilsons]
# number of frames to skip between visible frames during the initial searching state while
#  total number of links < 3, after 3 links are formed, this number is reduced to 5
#  due to the reduced likelihood of long search durations
#  lower this number to see more frames during the initial searching state (slower maze gen)
searching_frames_skipped = 60

# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# cell being targeted for the initial linked path
target.verbosity = [2,3,4]
target.layer = 0
target.color = 218
target.character = ""

# unlinked cells showing the walk searching for the maze
walk.verbosity = [2,3,4]
walk.layer = 0
walk.color = 49
walk.character = ""

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.frames_per_value = 1
working_cell.colors = [14]
working_cell.characters = []

# walks linked into the maze
new_linked_walks.verbosity = [3,4]
new_linked_walks.layer = 0
new_linked_walks.frames_per_value = 10
new_linked_walks.colors = [50, 87, 86, 50,44,37]
new_linked_walks.characters = []

# last cell linked into the walk
last_linked.verbosity = [3,4]
last_linked.layer = 1
last_linked.frames_per_value = 5
last_linked.colors = [56,62,68,74]
last_linked.characters = []

########################################################################
########################    Solve Algorithms    ########################
########################################################################
# NOTE: Path and Wall color cannot be set by Solve algorithms, must be set by the
#       maze algorithm responsible for the maze.
[breadth_first]

# current cell being assessed for neighbors in the path
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.color = 218
working_cell.character = ""

# color of cells on the outer edge of the search area
frontier.verbosity = [2,4]
frontier.layer = 0
frontier.color = 82
frontier.character = ""

# color of cells that have been visited
visited.verbosity = [3,4]
visited.layer = 0
visited.color = "#82EEEF"
visited.character = ""

# cells visited on the search path
# (color at index 0 is the start of the transition)
visited_animation.verbosity = [3,4]
visited_animation.layer = 1
visited_animation.frames_per_value = 10
#                              pink      pink     pink       grad      grad     img     img         img       wall      wall       wall      wall     img        img        img     grad      grad        blue    blue    blue
#visited_animation.colors = ["#f8c9d2","##fff8f9","#fbd9e0","#eec6d7","#ddb5d0","#c7a5cc","#c7a5cc","#8498c6","#9faed4","#b9c5e2","#d4dcf0","#398ba7","#398ba7","#398ba7","#398ba7","#82EEEF","#82EEEF","#82EEEF","#82EEEF","#4cabc1","#65ccd9","#b7feff","#d4fafa","#82EEEF"]
visited_animation.colors = ["#f8c9d2","##fff8f9","#fbd9e0","#eec6d7","#ddb5d0","#c7a5cc","#c7a5cc","#8498c6","#9faed4","#b9c5e2","#d4dcf0","#398ba7","#398ba7","#398ba7","#398ba7","#4cabc1","#65ccd9","#b7feff","#d4fafa","#82EEEF"]
visited_animation.characters = ["","","","","","","","","üûâ","üûá","üûÖ","","","",""]
#visited_animation.characters = ["","","","","","","","","üûâ","üûá","üûÖ","","","","","‚óª","‚ó´","‚óß","‚óº"]

# color of cell being targeted for the solution path
target.verbosity = [2,4]
target.layer = 0
target.color = 202
target.character = ""

# color of the solution path discovered
solution_path.verbosity = [2,4]
solution_path.layer = 1
solution_path.color = 46
solution_path.character = ""

# cells visited on the solution path
# (value at index 0 is the start of the transition)
solution_animation.verbosity = [2,4]
solution_animation.layer = 2
solution_animation.frames_per_value = 3
#solution_animation.colors = [21,93,92,91,89,160,166,172,178,184,190,154,118]
solution_animation.colors = [178,178,178,94,94,16,[22,28],[22,28],34,40,]
solution_animation.characters = ['‚ñà','‚ñà','‚ñà','‚ñà','‚ñà','‚ñà','01', '01', '1']
######################################################
######################################################
[breadth_first_early_exit]

# current cell being assessed for neighbors in the path
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.color = 218
working_cell.character = ""

# color of cells on the outer edge of the search area
frontier.verbosity = [2,4]
frontier.layer = 0
frontier.color = 82
frontier.character = ""

# color of cells that have been visited
visited.verbosity = [3,4]
visited.layer = 0
visited.color = 172
visited.character = ""

# cells visited on the search path
# (color at index 0 is the start of the transition)
visited_animation.verbosity = [3,4]
visited_animation.layer = 1
visited_animation.frames_per_value = 10
visited_animation.colors = [46,40,34,28,22,16,22,28,22,16,94,172]
visited_animation.characters = ["‚ñà","‚ñà","‚ñà","‚ñà","‚ñà","‚ñà","01","01","01","01"]

# color of cell being targeted for the solution path
target.verbosity = [2,4]
target.layer = 0
target.color = 202
target.character = ""

# color of the solution path discovered
solution_path.verbosity = [2,3,4]
solution_path.layer = 1
solution_path.color = 46
solution_path.character = ""

# cells visited on the solution path
# (value at index 0 is the start of the transition)
solution_animation.verbosity = [3,4]
solution_animation.layer = 2
solution_animation.frames_per_value = 2
solution_animation.colors = [21,93,92,91,89,160,166,172,178,184,190,154,118]
solution_animation.characters = []
######################################################
######################################################
[greedy_best_first]

# current cell being assessed for neighbors in the path
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.color = 218
working_cell.character = ""

# color of cells on the outer edge of the search area
frontier.verbosity = [2,4]
frontier.layer = 0
frontier.color = 82
frontier.character = ""

# color of cells that have been visited
visited.verbosity = [2,3,4]
visited.layer = 0
visited.color = 172
visited.character = ""

# cells visited on the search path
# (color at index 0 is the start of the transition)
visited_animation.verbosity = [3,4]
visited_animation.layer = 1
visited_animation.frames_per_value = 10
visited_animation.colors = [46,40,34,28,22,16,22,28,22,16,94,172]
visited_animation.characters = ["‚ñà","‚ñà","‚ñà","‚ñà","‚ñà","‚ñà","01","01","01","01"]

# color of cell being targeted for the solution path
target.verbosity = [2,4]
target.layer = 0
target.color = 202
target.character = ""

# color of the solution path discovered
solution_path.verbosity = [2,3,4]
solution_path.layer = 1
solution_path.color = 46
solution_path.character = ""

# cells visited on the solution path
# (value at index 0 is the start of the transition)
solution_animation.verbosity = [3,4]
solution_animation.layer = 2
solution_animation.frames_per_value = 2
solution_animation.colors = [21,93,92,91,89,160,166,172,178,184,190,154,118]
solution_animation.characters = []
######################################################
######################################################