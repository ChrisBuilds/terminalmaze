# NOTE: Colors are shown when their number of verbosity is enabled.
#       See help menu for more information. Not applicable to wall/path.
# Verbosity: 2 = Logic only, 3 = Style only, 4 = Logic and Style
#######################################################################
########################    MAZE ALGORITHMS    ########################
#######################################################################
[aldous_broder]
# time between frames while searching for unliked cells, longer delay allows
#  faster searching but causes a less fluid animation
maximum_searching_frame_delay = 0.027

# color of the walls and unlinked cells
wall.color = 16
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 34
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = [[218,"",1]]

# last grid cell that was linked into the maze
last_linked.verbosity = [3,4]
last_linked.layer = 1
last_linked.animation_details = [[28, "0", 30],[[22,46], ["1","0"],30],[46,"1",30]]

# neighbors invalid for linking (adjacent to the working cell)
invalid_neighbors.verbosity = [2,4]
invalid_neighbors.layer = 0
invalid_neighbors.animation_details = [[159,"",1]]

# cells that are already linked into the maze and are being revisted
invalid_visited.verbosity = [3,4]
invalid_visited.layer = 0
invalid_visited.animation_details = []


###########################
###########################
[binary_tree]
# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = []

# cell last linked into the maze
last_linked.verbosity = [2,4]
last_linked.layer = 0
last_linked.animation_details = []

# eighbors adjacent to the cell
neighbors.verbosity = [2,4]
neighbors.layer = 0
neighbors.animation_details = []

###########################
###########################
[ellers]
#NOTE: Ellers algorithm relies on random colors for the cell groups which
#      limits configuration options. Path color may only be observed after
#      maze generation has completed.

# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# groups of cells
group_to_random_color.verbosity = [2,3,4]
group_to_random_color.layer = 0
group_to_random_color.character = ""

###########################
###########################
[hunt_and_kill]
# number of frames to skip per frame shown during the hunting state, decrease
#  to slow down, and show more frames, during the hunting state
hunting_frames_skip = 3
# color of the walls and unlinked cells
wall.color = 16
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 34
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = []

# neighbors invalid for linking (adjacent to the working cell)
invalid_neighbors.verbosity = [2,4]
invalid_neighbors.layer = 0
invalid_neighbors.animation_details = []

# last cell linked into the grid
last_linked.verbosity = [3,4]
last_linked.layer = 0
last_linked.animation_details = []

# unlinked cells passed over while in the hunting state
hunt_cells.verbosity = [3,4]
hunt_cells.layer = 0
hunt_cells.animation_details = []


###########################
###########################
[kruskals_randomized]
#NOTE: Kruskal's Randomized algorithm relies on random colors for the cell groups which
#      limits configuration options. Path color may only be observed after
#      maze generation has completed.

# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# groups of cells
group_random_color.verbosity = [2,3,4]
group_random_color.layer = 0
group_random_color.character = ""

###########################
###########################
[prims_simple]
# frames skipped is based on the number of active edges, adjust the ratio up to slow
#  down and show more frames : int >= 1
edge_frame_ratio = 4

# color of the walls and unlinked cells
wall.color = "#398BA7"
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = "#F4B9C5"
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = [["#c3feff","",20]]

# cells on the edge of the linked area
edges.verbosity = [3,4]
edges.layer = 1
edges.animation_details = [["#82eeef", "‚ñ´", 20],["#8ae5ff","‚ñ™",20],["#add8ff","‚ñ¨",20],["#d3cafd","‚ñ†",20],["#ecbfe3","",20]]

# neighbors invalid for linking (adjacent to the working cell)
invalid_neighbors.verbosity = [2,4]
invalid_neighbors.layer = 0
invalid_neighbors.animation_details = [["",52,1]]

# last cell that was linked into the maze
last_linked.verbosity = [2,3,4]
last_linked.layer = 0
last_linked.animation_details = [["#82eeef", "‚ñ´", 20],["#8ae5ff","‚ñ™",20],["#add8ff","‚ñ¨",20],["#d3cafd","‚ñ†",20],["#ecbfe3","",20]]

###########################
###########################
[prims_weighted]
# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = []

# links encountered but not linked due to high cost
pending_weighted_links.verbosity = [3,4]
pending_weighted_links.layer = 0
pending_weighted_links.color = 79
pending_weighted_links.character = ""

# newly discovered links not linked due to high cost
new_weighted_links.verbosity = [3,4]
new_weighted_links.layer = 1
new_weighted_links.animation_details = []
# cells adjacent to the workingcell that are not linked
unlinked_neighbors.verbosity = [2,4]
unlinked_neighbors.layer = 0
unlinked_neighbors.animation_details = []

# cell last linked into the maze
last_linked.verbosity = [3,4]
last_linked.layer = 2
last_linked.animation_details = []

###########################
###########################
[recursive_backtracker]
# color of the walls and unlinked cells
wall.color = "#398BA7"
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = "#F4B9C5"
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = [[218,"",1]]

# path on the first pass, before backtracking
stack.verbosity = [3,4]
stack.layer = 0
stack.color = "#82EEEF"
stack.character = ""

# neighbors invalid for linking (adjacent to the working cell)
invalid_neighbors.verbosity = [2,4]
invalid_neighbors.layer=0
invalid_neighbors.animation_details = [[52,"",1]]

# last cell that was linked into the maze
last_linked.verbosity = [2,4]
last_linked.layer = 0
last_linked.animation_details = [[218,"",1]]

# cells as they are added to the stack
stack_added_cells.verbosity = [3,4]
stack_added_cells.layer = 0
stack_added_cells.animation_details = [["#f2ffff",'',5],["#defcfc",'',5],["#caf9f9",'',5],["#b4f5f6",'',5],["#9cf2f2",'',5]]

# cells as they are removed from the stack
stack_removed_cells.verbosity = [3,4]
stack_removed_cells.layer = 1
stack_removed_cells.animation_details = [["#f9d0d8",["üûó","üûû"],10],
                                        ["f9d0d8",["üûû","‚Øç"],10],
                                        ["#f9d0d8",["‚Øå","‚Øé","‚Øè","‚Øç"],10],
                                        ["#fce8eb",["‚Øç","‚ØÅ"],10],
                                        ["#fce8eb",["‚ØÅ","‚ØÇ"],10],
                                        ["#ffffff",["‚ØÇ","‚ØÄ"],10],
                                        ["#ffffff",["‚ØÄ","‚ñ†"],10],
                                        ["#fce8eb","",10]]
###########################
###########################
[recursive_division]

# color of the walls and unlinked cells
wall.color = "#000000"
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = "#43a047"
path.character = "‚ñà"

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = []

# single passage cell ignored during division
passage_cell.verbosity = [2,4]
passage_cell.layer = 1
passage_cell.animation_details = []

# fully linke.charactersd cells generated at the start of the maze generation
generating_links_cells.verbosity = [3,4]
generating_links_cells.layer = 0
generating_links_cells.animation_details = []

# east cells during a vertical division
division_cell_east.verbosity = [3,4]
division_cell_east.layer = 0
division_cell_east.animation_details = []

# west cells during a vertical division
division_cell_west.verbosity = [3,4]
division_cell_west.layer = 0
division_cell_west.animation_details = []

# north cells during a vertical division
division_cell_north.verbosity = [3,4]
division_cell_north.layer = 0
division_cell_north.animation_details = []

# south cells during a vertical division
division_cell_south.verbosity = [3,4]
division_cell_south.layer = 0
division_cell_south.animation_details = []

###########################
###########################
[side_winder]
# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# cells in each run prior to making an upward link
run.verbosity = [2,4]
run.layer = 1
run.color = 218
run.character = ""

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = []

# last cell that was linked into the maze
last_linked.verbosity = [2,4]
last_linked.layer = 0
last_linked.animation_details = []

###########################
###########################
[wilsons]
# number of frames to skip between visible frames during the initial searching state while
#  total number of links < 3, after 3 links are formed, this number is reduced to 5
#  due to the reduced likelihood of long search durations
#  lower this number to see more frames during the initial searching state (slower maze gen)
searching_frames_skipped = 60

# color of the walls and unlinked cells
wall.color = 240
wall.character = "‚ñà"

# color of the paths (linked cells)
path.color = 6
path.character = "‚ñà"

# cell being targeted for the initial linked path
target.verbosity = [2,3,4]
target.layer = 0
target.color = 218
target.character = ""

# unlinked cells showing the walk searching for the maze
walk.verbosity = [2,3,4]
walk.layer = 0
walk.color = 49
walk.character = ""

# current cell being assessed for linking
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.animation_details = []

# walks linked into the maze
new_linked_walks.verbosity = [3,4]
new_linked_walks.layer = 0
new_linked_walks.animation_details = []

# last cell linked into the walk
last_linked.verbosity = [3,4]
last_linked.layer = 1
last_linked.animation_details = []

########################################################################
########################    Solve Algorithms    ########################
########################################################################
# NOTE: Path and Wall color cannot be set by Solve algorithms, must be set by the
#       maze algorithm responsible for the maze.
[breadth_first]

# current cell being assessed for neighbors in the path
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.color = 218
working_cell.character = ""

# color of cells on the outer edge of the search area
frontier.verbosity = [2,4]
frontier.layer = 0
frontier.color = 82
frontier.character = ""

# color of cells that have been visited
visited.verbosity = [3,4]
visited.layer = 0
visited.color = "#82EEEF"
visited.character = ""

# cells visited on the search path
# (color at index 0 is the start of the transition)
visited_animation.verbosity = [3,4]
visited_animation.layer = 1
visited_animation.animation_details = [["#f8c9d2", "", 10],
                                        ["#fff8f9", "", 10],
                                        ["#fbd9e0", "", 10],
                                        ["#eec6d7", "", 10],
                                        ["#ddb5d0", "", 10],
                                        ["#c7a5cc", "", 10],
                                        ["#c7a5cc", "", 10],
                                        ["#8498c6", "", 10],
                                        ["#9faed4", "üûâ", 10],
                                        ["#b9c5e2", "üûá", 10],
                                        ["#d4dcf0", "üûÖ", 10],
                                        ["#398ba7", "", 10],
                                        ["#398ba7", "", 10],
                                        ["#398ba7", "", 10],
                                        ["#398ba7", "", 10],
                                        ["#4cabc1", "", 10],
                                        ["#65ccd9", "", 10],
                                        ["#b7feff", "", 10],
                                        ["#d4fafa", "", 10],
                                        ["#82EEEF", "", 10]]


# color of cell being targeted for the solution path
target.verbosity = [2,4]
target.layer = 0
target.color = 202
target.character = ""

# color of the solution path discovered
solution_path.verbosity = [2,4]
solution_path.layer = 1
solution_path.color = 46
solution_path.character = ""

# cells visited on the solution path
# (value at index 0 is the start of the transition)
solution_animation.verbosity = [2,4]
solution_animation.layer = 2
solution_animation.animation_details = []
######################################################
######################################################
[breadth_first_early_exit]

# current cell being assessed for neighbors in the path
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.color = 218
working_cell.character = ""

# color of cells on the outer edge of the search area
frontier.verbosity = [2,4]
frontier.layer = 0
frontier.color = 82
frontier.character = ""

# color of cells that have been visited
visited.verbosity = [3,4]
visited.layer = 0
visited.color = 172
visited.character = ""

# cells visited on the search path
# (color at index 0 is the start of the transition)
visited_animation.verbosity = [3,4]
visited_animation.layer = 1
visited_animation.animation_details = []

# color of cell being targeted for the solution path
target.verbosity = [2,4]
target.layer = 0
target.color = 202
target.character = ""

# color of the solution path discovered
solution_path.verbosity = [2,3,4]
solution_path.layer = 1
solution_path.color = 46
solution_path.character = ""

# cells visited on the solution path
# (value at index 0 is the start of the transition)
solution_animation.verbosity = [3,4]
solution_animation.layer = 2
solution_animation.animation_details = []

######################################################
######################################################
[greedy_best_first]

# current cell being assessed for neighbors in the path
working_cell.verbosity = [2,4]
working_cell.layer = 0
working_cell.color = 218
working_cell.character = ""

# color of cells on the outer edge of the search area
frontier.verbosity = [2,4]
frontier.layer = 0
frontier.color = 82
frontier.character = ""

# color of cells that have been visited
visited.verbosity = [2,3,4]
visited.layer = 0
visited.color = 172
visited.character = ""

# cells visited on the search path
# (color at index 0 is the start of the transition)
visited_animation.verbosity = [3,4]
visited_animation.layer = 1
visited_animation.animation_details = []

# color of cell being targeted for the solution path
target.verbosity = [2,4]
target.layer = 0
target.color = 202
target.character = ""

# color of the solution path discovered
solution_path.verbosity = [2,3,4]
solution_path.layer = 1
solution_path.color = 46
solution_path.character = ""

# cells visited on the solution path
# (value at index 0 is the start of the transition)
solution_animation.verbosity = [3,4]
solution_animation.layer = 2
solution_animation.animation_details = []
######################################################
######################################################